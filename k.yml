---
- name: Setup Android-x86 on QEMU VM with ADB and VNC access
  hosts: localhost
  become: true
  vars:
    iso_url: "https://osdn.net/projects/android-x86/releases/download/69249/android-x86_64-9.0-r2.iso"
    iso_file: "/tmp/android-x86_64-9.0-r2.iso"
    fallback_iso_url: "https://mirror.example.com/android-x86_64-9.0-r2.iso"  # Fallback URL
    disk_image: "/tmp/android.img"
    disk_size: "75G"
    memory: "4096"
    cpu: "1"
    vnc_apk: "droidVNC-NG-1.2.0.apk"
    vnc_apk_url: "https://github.com/bk138/droidVNC-NG/releases/download/v1.2.0/{{ vnc_apk }}"

  tasks:
    # Step 1: Install required packages
    - name: Install necessary tools for QEMU and Android setup
      apt:
        name:
          - qemu-kvm
          - libvirt-daemon-system
          - libvirt-clients
          - bridge-utils
          - android-tools-adb
          - wget
        state: present
        update_cache: yes

    # Step 2: Check Internet Connectivity (Basic Ping Test)
    - name: Check internet connectivity (ping google.com)
      command: ping -c 2 google.com
      register: ping_result
      failed_when: ping_result.rc != 0
      ignore_errors: yes

    - name: Fail playbook if internet is not reachable
      fail:
        msg: "Internet connection is required to download the ISO, but it seems unavailable."
      when: ping_result.rc != 0

    # Step 3: Attempt to download Android-x86 ISO
    - name: Attempt to download Android-x86 ISO
      get_url:
        url: "{{ iso_url }}"
        dest: "{{ iso_file }}"
        mode: '0644'
      register: iso_download_result
      retries: 3   # Retry 3 times if download fails
      delay: 10    # Delay 10 seconds between retries
      ignore_errors: yes

    # Step 4: Fallback: If the primary ISO download fails, attempt fallback URL
    - name: Download fallback Android-x86 ISO if the primary URL fails
      get_url:
        url: "{{ fallback_iso_url }}"
        dest: "{{ iso_file }}"
        mode: '0644'
      register: fallback_download_result
      when: iso_download_result is failed
      retries: 2   # Retry 2 times on fallback download
      delay: 10
      ignore_errors: yes

    # Step 5: Manual Alternative: Prompt user for local ISO if both downloads fail
    - name: Prompt user to provide ISO manually if both URLs fail
      pause:
        prompt: "Both download attempts failed. Please manually download the Android-x86 ISO and place it at {{ iso_file }}. Press Enter to continue when done."
      when: iso_download_result is failed and fallback_download_result is failed

    # Step 6: Ensure ISO file exists (validate download or manual supply)
    - name: Ensure the Android-x86 ISO exists
      stat:
        path: "{{ iso_file }}"
      register: iso_file_check

    # Step 7: Fail explicitly if no supported download method worked
    - name: Fail if no supported method to retrieve ISO
      fail:
        msg: "No supported method to obtain the Android-x86 ISO worked. Both downloads failed, and no manual ISO was provided."
      when: not iso_file_check.stat.exists

    # Step 8: Create a QEMU disk image for Android-x86
    - name: Create QEMU disk image for Android-x86
      command: "qemu-img create -f qcow2 {{ disk_image }} {{ disk_size }}"

    # Step 9: Start the QEMU VM for installation (manual installation by user)
    - name: Start QEMU VM for installation (User will install Android-x86 manually)
      command: >
        qemu-system-x86_64
        -enable-kvm
        -m {{ memory }}
        -smp {{ cpu }}
        -hda {{ disk_image }}
        -cdrom {{ iso_file }}
        -boot d
        -vga std
        -usb
        -device usb-tablet
      async: 1200  # Allow user 20 minutes to install the OS
      poll: 0

    # Step 10: Wait for user to install and reboot
    - name: Prompt user to complete installation and reboot
      pause:
        prompt: "Press Enter after completing the Android-x86 installation and rebooting the VM."

    # Step 11: Start the QEMU VM with port redirection for ADB
    - name: Start QEMU VM with ADB access
      command: >
        qemu-system-x86_64
        -enable-kvm
        -m {{ memory }}
        -smp {{ cpu }}
        -hda {{ disk_image }}
        -vga std
        -usb
        -device usb-tablet
        -redir tcp:5555::5555
      async: 120
      poll: 0

    # Step 12: Wait for the VM to boot
    - name: Wait for the VM to boot
      pause:
        seconds: 60

    # Step 13: Connect via ADB
    - name: Connect to the VM via ADB
      command: "adb connect localhost:5555"

    # Step 14: Enable root access via ADB
    - name: Enable root access on the Android VM
      command: "adb root"

    # Step 15: Download the VNC server APK
    - name: Download VNC server APK
      get_url:
        url: "{{ vnc_apk_url }}"
        dest: "/tmp/{{ vnc_apk }}"
        mode: '0644'

    # Step 16: Install the VNC server APK on Android-x86
    - name: Install VNC server APK on Android VM
      command: "adb install /tmp/{{ vnc_apk }}"

    # Step 17: Start the VNC server on Android-x86
    - name: Start the VNC server on the Android VM
      command: "adb shell am start -n com.bk138.droidvncng/.DroidVNC"

    # Step 18: Display VNC connection instructions
    - name: VNC server running instructions
      debug:
        msg: "Android-x86 is now installed. Connect via ADB on port 5555 and VNC using a VNC client."
